name: Collect and commit latest version

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of publication'
        required: true
        default: release
      branch:
        description: 'Branch to collect from'
        required: true
        default: 'main'
      tag:
        description: 'Release tag'
        required: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Check if the tag is >= v1.14.0 and create environment variables
      - name: Check tag version & set environment variables
        run: |
          export TAG=${{ inputs.tag }}
          if [ "$(printf '%s\n' "v1.14.0" "$TAG" | sort -V | head -n1)" != "v1.14.0" ]; then
            echo "Tag is less than v1.14.0. Exiting."
            exit 1
          fi
          export DEST="releases/${{ inputs.tag }}"
          export MAJOR=$(echo "$TAG" | cut -d'.' -f1 | sed 's/v//' | awk '{print $1 + 0}')
          export COLLECT="collect/${{ inputs.tag }}"
          if [ "${{ inputs.type }}" == "release" ]; then
            export BRANCH="main"
          else
            export BRANCH="${{ inputs.type }}"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "DEST=$DEST" >> $GITHUB_ENV
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "COLLECT=$COLLECT" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      # Checkout the dsfr repository
      - name: Checkout dsfr
        uses: actions/checkout@v4
        with:
          repository: GouvernementFR/dsfr
          ref: ${{ inputs.branch }}
          path: dsfr

      # Checkout the dsfr-archive
      - name: Checkout dsfr-archive
        uses: actions/checkout@v4
        with:
          repository: GouvernementFR/dsfr-archive
          token: ${{ secrets.GITHUB_TOKEN }}
          path: archive

      # Set up Node.js and Yarn
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.14.0'
        continue-on-error: false

      # Install dependencies
      - name: Install dependencies
        run: |
          if [ "${{ env.MAJOR }}" -gt 1 ]; then
            corepack enable
          fi          
          yarn install
        working-directory: dsfr
        continue-on-error: false

      # Build the project
      - name: Build the project
        run: yarn archive
        working-directory: dsfr

      # Create branch and remove existing release folder if it exists
      - name: Remove existing release folder
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # Check if the branch already exists
          if git show-ref --verify --quiet refs/heads/${{ env.COLLECT }}; then
            echo "Branch ${{ env.COLLECT }} already exists. Deleting it."
            git branch -D ${{ env.COLLECT }}
            if git ls-remote --exit-code --heads origin "${{ env.COLLECT }}"; then
              git push origin --delete "${{ env.COLLECT }}"
            fi
          fi
          # Create a new branch
          git checkout -b ${{ env.COLLECT }}
          if [ -d "${{ env.DEST }}" ]; then
            git rm -r --ignore-unmatch ${{ env.DEST }}
            git commit -m "remove existing release folder"
          fi
        working-directory: archive

      # Copy archive files to the destination folder
      - name: Copy files to folder
        run: |
          mkdir -p archive/${{ env.DEST }}
          cp -r dsfr/.archive/* archive/${{ env.DEST }}

      # Commit and push changes to the branch
      - name: Commit and push release
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "add release files for ${{ inputs.tag }}"
          # merge the branch into the main branch squash
          git checkout main
          git merge --squash ${{ env.COLLECT }}
          if [ "${{ inputs.type }}" != "release" ]; then
            if git show-ref --verify --quiet refs/heads/"${{ env.BRANCH }}"; then
              git branch -D "${{ env.BRANCH }}"
            fi
            if git ls-remote --exit-code --heads origin "${{ env.BRANCH }}"; then
              git push origin --delete "${{ env.BRANCH }}"
            fi
            git checkout -b "${{ env.BRANCH }}"
          fi
          git commit -m "ðŸšš chore: collected DSFR release ${{ inputs.tag }}"
          git push --set-upstream origin "${{ env.BRANCH }}"
        working-directory: archive

      # Trigger the release workflow
      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'release-trigger',
                client_payload: {
                    type: '${{ inputs.type }}',
                    branch: '${{ env.BRANCH }}',
                    tag: '${{ inputs.tag }}'
                }
            });
