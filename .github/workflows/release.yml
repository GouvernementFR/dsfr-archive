name: Build, release and Increment version

on:
  push:
    branches:
      - main

  repository_dispatch:
    types: [ release-trigger ]

  workflow_dispatch:

jobs:
  increment-build-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set environment variables based on the type of publication
      - name: Set up environment variables
        run: |
          if [ -n "${{ github.ref_name }}" ] && [ "${{ github.ref_name }}" != "" ]; then
            if [ "${{ github.ref_name }}" == "main" ]; then
              TYPE="release"
            else
              TYPE="${{ github.ref_name }}"
            fi
          elif [ -n "${{ github.event.client_payload.type }}" ] && [ "${{ github.event.client_payload.type }}" != "" ]; then
            TYPE="${{ github.event.client_payload.type }}"
          else
            TYPE="release"
          fi
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          if [ "${TYPE}" != 'release' ]; then
            echo "BRANCH=${TYPE}" >> $GITHUB_ENV
          else
            echo "BRANCH=main" >> $GITHUB_ENV
          fi
          if [ ! -d "releases" ]; then
            echo "Releases directory does not exist or is empty."
            exit 1
          fi
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n1)
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "${VERSION}"
          PATCH=$((PATCH + 1))
          TAG="v$MAJOR.$MINOR.$PATCH"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE=${TAG}-${TYPE}" >> $GITHUB_ENV
          echo "FILE=archive-${RELEASE}.zip" >> $GITHUB_ENV
          if [ "${TYPE}" != "release" ]; then
            git checkout -b "${BRANCH}"
          fi

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.14.0'

      # Enable corepack
      - name: Enable corepack
        run: |
          corepack enable
          yarn

      # Build the project
      - name: Build the project
        run: |
          yarn dsfr configure
          yarn dsfr interpret
          yarn dsfr publish

      # Perform the release using the current version
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          mv .doc www
          mv .env env
          zip -r ${{ env.FILE }} www env -x "*.DS_Store"
          git checkout main
          gh release create ${{ env.TAG }} ${{ env.FILE }} --title "Release ${{ env.TAG }}" --notes "Automated release for version ${{ env.TAG }}"
