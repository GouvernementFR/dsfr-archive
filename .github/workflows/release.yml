name: Build and release

on:
  push:
    branches:
      - main

  repository_dispatch:
    types: [ release-trigger ]

  workflow_dispatch:

jobs:
  increment-build-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set environment variables based on the type of publication
      - name: Set up environment variables
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.ref_name }}" ] && [ "${{ github.ref_name }}" != "" ] && [ "${{ github.ref_name }}" != "main" ]; then
              export TYPE="${{ github.ref_name }}"
            else
              export TYPE="release"
            fi
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            if [ -n "${{ github.event.client_payload.type }}" ] && [ "${{ github.event.client_payload.type }}" != "" ]; then
              export TYPE="${{ github.event.client_payload.type }}"
            else
              export TYPE="release"
            fi
          else
            export TYPE="release"
          fi
          if [ "$TYPE" != "release" ]; then
            export BRANCH="$TYPE"
            echo "type is not release, using branch $TYPE"
          else
            export BRANCH="main"
            echo "type is release, using branch $BRANCH"
          fi
          export LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "latest tag: $LATEST_TAG"
          if [ -z "$LATEST_TAG" ]; then
            export TAG="v1.0.0"
          else
            export VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            export TAG="v$MAJOR.$MINOR.$PATCH"
          fi
          export RELEASE="${TAG}-${TYPE}"
          export FILE="archive-${RELEASE}.zip"
          echo "TYPE: $TYPE"
          echo "BRANCH: $BRANCH"
          echo "TAG: $TAG"
          echo "RELEASE: $RELEASE"
          echo "FILE: $FILE"
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "FILE=$FILE" >> $GITHUB_ENV

      # Checkout specific branch if not main
      - name: Checkout repository
        if: env.BRANCH != 'main'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0

      # Check if releases directory exists
      - name: Check releases exists
        run: |
          if [ ! -d "releases" ]; then
            echo "Releases directory does not exist or is empty."
            exit 1
          fi

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.14.0'

      # Enable corepack
      - name: Enable corepack
        run: |
          corepack enable
          yarn

      # Build the project
      - name: Build the project
        run: |
          yarn dsfr configure
          yarn dsfr interpret
          yarn dsfr publish

      # Perform the release using the current version
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          mv .doc www
          mv .env env
          zip -r ${{ env.FILE }} www env -x "*.DS_Store"
          git checkout main
          gh release create ${{ env.TAG }} ${{ env.FILE }} --title "Release ${{ env.TAG }}" --notes "Automated release for version ${{ env.TAG }}"
