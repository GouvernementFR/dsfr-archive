name: Build and release

on:
  push:
    branches:
      - main

  repository_dispatch:
    types: [ release-trigger ]

  workflow_dispatch:

jobs:
  increment-build-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set environment variables based on the type of publication
      - name: Set up environment variables
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine TYPE based on the event type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.ref_name }}" ] && [ "${{ github.ref_name }}" != "" ] && [ "${{ github.ref_name }}" != "main" ]; then
              export TYPE="${{ github.ref_name }}"
            else
              export TYPE="release"
            fi
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            if [ -n "${{ github.event.client_payload.type }}" ] && [ "${{ github.event.client_payload.type }}" != "" ]; then
              export TYPE="${{ github.event.client_payload.type }}"
            else
              export TYPE="release"
            fi
          else
            export TYPE="release"
          fi
          
          # Set BRANCH based on TYPE
          if [ "$TYPE" != "release" ]; then
            export BRANCH="$TYPE"
            echo "type is not release, using branch $TYPE"
          else
            export BRANCH="main"
            echo "type is release, using branch $BRANCH"
          fi
          
          # Export variables to GitHub environment
          echo "TYPE: $TYPE"
          echo "BRANCH: $BRANCH"
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      # Checkout specific branch if not main
      - name: Checkout repository
        if: env.BRANCH != 'main'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0

      # Check if releases directory exists and determine tag
      - name: get tag
        run: |
          if [ ! -d "releases" ]; then
            echo "Releases directory does not exist or is empty. No release needed."
            export RELEASING=false
          else
            export RELEASING=true
          fi
          
          # Get all version folder names, sort, and pick the highest
          export HIGHEST_VERSION=$(ls releases | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-.+)?$' | sort -V | tail -n1)
          if [ -z "$HIGHEST_VERSION" ]; then
            export HIGHEST_VERSION="v1.0.0"
          fi

          # Determine type and appendix
          if [ "$TYPE" = "release" ]; then
            export BASE_TAG="${HIGHEST_VERSION}--prod"
          else
            export BASE_TAG="${HIGHEST_VERSION}--${{ env.TYPE }}"
          fi
      
          # Find existing tags with +build.# and increment
          export EXISTING_TAGS=$(git tag --list "${BASE_TAG}+build.*")
          echo "Existing tags: $EXISTING_TAGS"  
          if [ -z "$EXISTING_TAGS" ]; then
            echo "No existing tags found for ${BASE_TAG}+build.*"
            export BUILD_NUM=1
          else
            BUILD_NUM=$(echo "$EXISTING_TAGS" | sed -E "s/.*\+build\.([0-9]+)$/\1/" | sort -n | tail -n1)
          echo "Current build number: $BUILD_NUM"
            export BUILD_NUM=$((BUILD_NUM + 1))
          fi
      
          # Set the final tag and file name
          export TAG="${BASE_TAG}+build.${BUILD_NUM}"
          export FILE="archive-${TAG}.zip"
          
          # Export variables to GitHub environment
          echo "TAG: $TAG"
          echo "FILE: $FILE"
          echo "RELEASING=$RELEASING" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "FILE=$FILE" >> $GITHUB_ENV

      # Set up Node.js
      - name: Set up Node.js
        if: env.RELEASING == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22.14.0'

      # Enable corepack
      - name: Enable corepack
        if: env.RELEASING == 'true'
        run: |
          corepack enable
          yarn

      # Build the project
      - name: Build the project
        if: env.RELEASING == 'true'
        run: |
          
          yarn info @gouvfr/dsfr-nexus version
          yarn dsfr configure
          yarn dsfr interpret
          yarn dsfr publish

      # Perform the release using the current version
      - name: Create GitHub release
        if: env.RELEASING == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          mv .doc www
          mv .env env
          zip -r ${{ env.FILE }} www env -x "*.DS_Store"
          git checkout main
          gh release create ${{ env.TAG }} ${{ env.FILE }} --title "Release ${{ env.TAG }}" --notes "Automated release for version ${{ env.TAG }}"
